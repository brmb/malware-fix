#!/bin/bash
#!/usr/bin/php
RED='\033[0;31m'
BRED='\033[1;31m'
YELLOW='\033[0;33m'
BYELLOW='\033[1;33m'
GREEN='\033[0;32m'
BGREEN='\033[1;32m'
BWHITE='\033[1;37m'
PURPLE='\033[0;35m'
CHECK="${BGREEN}\xE2\x9C\x85${NC}"
CROSS="${BRED}\xE2\x9D\x8C${NC}"
WAVE="\xF0\x9F\x91\x8B"
WRENCH="\xF0\x9F\x9B\xA0"
EXCLAMATION="\xE2\x9D\x97"
NC='\033[0m'
DATE=$(date +%F"_"%H:%M:%S);

clear
function main {
  echo -e "\n${BWHITE}Welcome ${WAVE} This script is capable of:${NC}"
  echo -e "1)${BGREEN}  Search & Replace${NC} - you can search and replace domains/subdomains. ${BWHITE}All CMS compatible.${NC}"
  echo -e "2)${BGREEN}  List suspicious files${NC} - lists suspicious files in suspiciousFiles.txt. ${BWHITE}All CMS compatible.${NC}"
  echo -e "3)${BGREEN}  Malware Fix${NC} - tries to fix infected WordPress website."
  echo -e "4)${BGREEN}  Vulnerabilities checker${NC} ${BRED}[NEW]${NC} - checks for vulnerable WordPress plugins & themes."
  echo -e "5)${BGREEN}  Install SSL${NC} - generates SSL keys automatically. ${BWHITE}All CMS compatible.${NC}"
  echo -e "6)${BGREEN}  Update plugins${NC} - updates all WordPress plugins."
  echo -e "7)${BGREEN}  Update themes${NC} - updates all WordPress themes."
  echo -e "8)${BGREEN}  Update core files${NC} - updates WordPress core files."
  echo -e "9)${BGREEN}  Reinstall core files${NC} - reinstalls WordPress core files."
  echo -e "10)${BGREEN} Repair database${NC} - repairs WordPress database."
  echo -e "11)${BGREEN} Flush Elementor cache${NC} - flushes WordPress Elementor cache."
  echo -e "12)${BGREEN} Flush LiteSpeed cache${NC} - flushes WordPress LiteSpeed cache."
  echo -e "13)${BGREEN} Test PHP mail${NC} - allows to test PHP mail easier."
  echo -e "14)${BGREEN} Scan and print databases${NC} - allows to see which databases belong to all domain/subdomain in WP sites."
  echo -e "0)${BRED} Exit${NC} - exits the script."

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_search_replace;;
      2) SELECT=func_list_suspicious_files;;
      3) SELECT=func_malware_fix;;
      4) SELECT=func_vulnerabilities_checkers;;
      5) SELECT=func_install_ssls;;
      6) SELECT=func_update_plugins;;
      7) SELECT=func_update_themes;;
      8) SELECT=func_update_cores;;
      9) SELECT=func_reinstall_cores;;
      10) SELECT=func_repair_dbs;;
      11) SELECT=func_elementors;;
      12) SELECT=func_litespeeds;;
      13) SELECT=func_php_mails;;
      14) SELECT=func_scan_databases;;
      0) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_list_suspicious_files {
  echo -e "\nPlease choose:
  1. List suspicious files for domain
  2. List suspicious files for subdomain
  3. Exit"
  
    while true; do
      read -r SELECT
      case "$SELECT" in
        1) SELECT=func_list_suspicious_file;;
        2) SELECT=func_list_suspicious_file_subdomain;;
        3) SELECT=exit;;
        *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
      esac
      break
    done
}

function func_update_plugins {
  echo -e "\nPlease choose:
  1. Update plugins for domain
  2. Update plugins for subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_update_plugin;;
      2) SELECT=func_update_plugin_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_vulnerabilities_checkers {
  echo -e "\nPlease choose:
  1. Check Vulnerabilities for 1 domain
  2. Check Vulnerabilities for 1 subdomain
  3. Check Vulnerabilities for all domains
  4. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_vulnerabilities_checker;;
      2) SELECT=func_vulnerabilities_checker_subdomain;;
      3) SELECT=func_vulnerabilities_checker_all;;
      4) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_install_ssls {
  echo -e "\nPlease choose:
  1. Install SSL for domain
  2. Install SSL for subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_install_ssl;;
      2) SELECT=func_install_ssl_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_update_themes {
  echo -e "\nPlease choose:
  1. Update themes for domain
  2. Update themes for subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_update_theme;;
      2) SELECT=func_update_theme_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_update_cores {
  echo -e "\nPlease choose:
  1. Update core files for domain
  2. Update core files for subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_update_core;;
      2) SELECT=func_update_core_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_reinstall_cores {
  echo -e "\nPlease choose:
  1. Reinstall core files for domain
  2. Reinstall core files for subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_reinstall_core;;
      2) SELECT=func_reinstall_core_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_repair_dbs {
  echo -e "\nPlease choose:
  1. Repair database for domain
  2. Repair database for subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_repair_db;;
      2) SELECT=func_repair_db_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_elementors {
  echo -e "\nPlease choose:
  1. Flush Elementor cache for domain
  2. Flush Elementor cache for subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_elementor;;
      2) SELECT=func_elementor_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_litespeeds {
  echo -e "\nPlease choose:
  1. Flush LiteSpeed cache for domain
  2. Flush LiteSpeed cache for subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_litespeed;;
      2) SELECT=func_litespeed_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}

function func_php_mails {
  echo -e "\nPlease choose:
  1. Test PHP mail on domain
  2. Test PHP mail on subdomain
  3. Exit"

  while true; do
    read -r SELECT
    case "$SELECT" in
      1) SELECT=func_php_mail;;
      2) SELECT=func_php_mail_subdomain;;
      3) SELECT=exit;;
      *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
    esac
    break
  done
}


# function func_subdomain_domain_extracts {
#   echo -e "\nPlease choose:
#   1. Domain
#   2. Subdomain
#   3. Exit"
# 
#   while true; do
#     read -r SELECT
#     case "$SELECT" in
#       1) SELECT=func_domain_extract;;
#       2) SELECT=func_subdomain_extract;;
#       3) SELECT=exit;;
#       *) echo -e "${BRED}Invalid selection, try again.${NC}"; continue
#     esac
#     break
#   done
# }

# function func_domain_extract {
#     echo -ne "${PURPLE}Please enter the full domain name (domain.com): ${NC}"; read -r domain_name_extract
#     echo "$subdomain_name_extract" | cut -d "." -f2,3
#   return 1
# }

# function func_subdomain_extract {
#     echo -ne "${PURPLE}Please enter the full subdomain name (subdomain.domain.com): ${NC}"; read -r subdomain_name_extract
#     echo "$subdomain_name_extract" | cut -d "." -f2,3
#   return 1
# }


###-----------------------------------------------------------###
###    Write a function for each possible value of $SELECT    ###
###-----------------------------------------------------------###


function func_backup_question {
  echo -ne "\n${PURPLE}Do you want to make files and database backup (y/n)?${NC} "; read -r answer
  case ${answer:0:1} in y|Y )
    username=$(echo "$cwd" | awk -F[/:] '{ print $3 }')
    dirs=(/home/"${username}"/domains/*/public_html)
    read -p "$(
      f=0
      for dirname in "${dirs[@]}" ; do
        echo "$((++f)): $dirname"
      done
      echo -e "${PURPLE}Please select a directory: ${NC}")" selection

    selected_dir="${dirs[$((selection-1))]}"
    echo -e "${BWHITE}You selected '$selected_dir'${NC}"
    domain_name=$(echo "$selected_dir" | awk -F[/:] '{ print $5 }')

    echo -e "\n${BYELLOW}Preparing files backup in /home/${username}/ folder.${NC}"
    # cd /home/${username}/ && backup=FILES_BACKUP_${DATE}_${domain_name} && mkdir $backup && cp -r ${selected_dir}/* /home/${username}/$backup
    cd /home/"${username}"/ && backup=FILES_BACKUP_${DATE}_${domain_name} && mkdir "$backup" && rsync -a "${selected_dir}"/* /home/"${username}"/"$backup" --exclude="fix.sh"
    echo -e "${CHECK} ${GREEN}Prepared.${NC}\n"
    if [[ -d ${selected_dir}/wp-content ]]
      then
        WPDBNAME=$(cat "${selected_dir}"/wp-config.php | grep DB_NAME | cut -d \' -f 4)
        WPDBUSER=$(cat "${selected_dir}"/wp-config.php | grep DB_USER | cut -d \' -f 4)
        WPDBPASS=$(cat "${selected_dir}"/wp-config.php | grep DB_PASSWORD | cut -d \' -f 4)
        echo -e "${BYELLOW}Preparing WordPress databse (${WPDBNAME}) backup in /home/${username}/ folder.${NC}"
        db_backup=DB_BACKUP_${DATE}_${WPDBNAME} && mkdir "$db_backup" && mysqldump -u "${WPDBUSER}" -p"${WPDBPASS}" "${WPDBNAME}" > /home/"${username}"/"${db_backup}"/"${WPDBNAME}".sql 
        # db_backup=DB_BACKUP_${DATE}_${WPDBNAME} && mkdir "$db_backup" && mysqldump -u "${WPDBUSER}" -p"${WPDBPASS}" "${WPDBNAME}" | gzip > /home/"${username}"/"${db_backup}"/"${WPDBNAME}".gz
      else
        echo -ne "${PURPLE}Enter clients MySQL Database Name: ${NC}"; read -r db_name 
        echo -ne "${PURPLE}Enter clients MySQL Database Username: ${NC}"; read -r db_username
        echo -ne "${PURPLE}Enter clients MySQL Database password: ${NC}"; read -sr db_password
        echo -e "${BYELLOW}Preparing database backup in /home/${username}/ folder.${NC}"
        db_backup=DB_BACKUP_${DATE}_${db_name} && mkdir "$db_backup" && mysqldump -u "${db_username}" -p"${db_password}" "${db_name}" > /home/"${username}"/"${db_backup}"/"${db_name}".sql
        # db_backup=DB_BACKUP_${DATE}_${db_name} && mkdir "$db_backup" && mysqldump -u "${db_username}" -p"${db_password}" "${db_name}" | gzip > /home/"${username}"/"${db_backup}"/"${db_name}".gz
    fi
    cd "$cwd"
    echo -e "${CHECK} ${GREEN}Prepared.${NC}\n"
    ;;
  * )
  echo -e "${CROSS} ${BRED}BACKUP WILL NOT BE DONE!${NC}\n"
  ;;
  esac
}

function func_domain_selection {
  cwd=$(pwd)
  username=$(echo "$cwd" | awk -F[/:] '{ print $3 }')
  dirs=(/home/"${username}"/domains/*/public_html)
  read -p "$(
    f=0
    for dirname in "${dirs[@]}" ; do
      echo "$((++f)): $dirname"
    done
    echo -e "${PURPLE}Please select the domain name: ${NC}")" selection

  selected_dir="${dirs[$((selection-1))]}"
  echo -e "${BWHITE}You selected '$selected_dir'${NC}"
  domain_name=$(echo "$selected_dir" | awk -F[/:] '{ print $5 }')
  cd /home/"${username}"/domains/"${domain_name}"/public_html || exit
}

function func_search_replace {
    cwd=$(pwd)
    func_backup_question;
    echo -e "${BYELLOW}Make sure you're running this script in website public_html folder!${NC}"
    echo -n "You are in"; pwd;
    echo -ne "\n${PURPLE}Enter domain name you want to replace (without TLD. If domain is abc.com, enter just abc): ${NC}"; read -r malwareDomain
    echo -ne "${PURPLE}Enter domain TLD you want to replace: ${NC}"; read -r malwareDomainTLD
    echo -ne "${PURPLE}Enter clients domain name you want to replace TO (without TLD. If domain is abc.com, enter just abc): ${NC}"; read -r goodDomain
    echo -ne "${PURPLE}Enter clients domain TLD you want to replace TO: ${NC}"; read -r goodDomainTLD
    grep -rl "${malwareDomain}" ./ | xargs sed -i -e "s/${malwareDomain}\.${malwareDomainTLD}/${goodDomain}\.${goodDomainTLD}/gI" # TODO: pazet sed komanda ar nekelia issues nes saudo error'us kartais del -i, g ir I.
    echo -e "${CHECK} ${GREEN}All occurrences of ${malwareDomain}.${malwareDomainTLD} has been replaced with ${goodDomain}.${goodDomainTLD} ${NC}"
  return 1
}

function func_list_suspicious_file {
    suspicious_Encoding=("eval(gzinflate(base64_decode\|eval (gzinflate(base64_decode\|eval(gzinflate (base64_decode\|eval (gzinflate (base64_decode\|eval(base64_decode\|eval (base64_decode\|gzinflate(base64_decode\|gzinflate (base64_decode\|gzinflate")
    dashed_line=("----------------------------------------------------------------------------------------------")
    func_domain_selection;
    echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    # grep -RPn &quot;(base64_decode|is_admin|eval|gzuncompress|passthru|exec|shell_exec|assert|str_rot13|system|phpinfo|chmod|mkdir|fopen|fclose|readfile|stripslashes|preg_replace|move_uploaded_file) *\(&quot;
    
    echo -n "${dashed_line}" > suspiciousFiles.txt ; echo -e "\n\nSUSPICIOUS FILES IN /wp-content/uploads/ DIRECTORY\n(Excluding .jpg, .jpeg, .png, .gif, .svg, .webp, .mp4, .mov, .css, .txt, .log):\n" >> suspiciousFiles.txt
    cd ~/domains/"${domain_name}"/public_html/ && find wp-content/uploads/ -type f \( -iname "*.*" ! -iname "*.jpg" ! -iname "*.jpeg" ! -iname "*.png" ! -iname "*.gif" ! -iname "*.svg" ! -iname "*.webp" ! -iname "*.mp4" ! -iname "*.mov" ! -iname "*.css" ! -iname "*.txt" ! -iname "*.log" \) >> suspiciousFiles.txt
    
    echo -n "${dashed_line}" >> suspiciousFiles.txt ; echo -e "\n\nSUSPICIOUS .php FILES IN /public_html/ DIRECTORY:\n" >> suspiciousFiles.txt
    level_medium=("eval(gzinflate(base64_decode\|eval(base64_decode(\|gzinflate(base64_decode\|gzinflate")
    cd ~/domains/"${domain_name}"/public_html/ && find . -type f -iname "*.php" -print0 | xargs -0 grep -ilE "${level_medium}" >> suspiciousFiles.txt

    # echo -n "${dashed_line}" >> suspiciousFiles.txt ; echo -e "\n\nSUSPICIOUS FILES THAT HAS ENCODING/ENCRYPTION INSIDE:\n" >> suspiciousFiles.txt
    # cd ~/domains/"${domain_name}"/public_html/ && grep -ilE "${suspicious_Encoding}" >> suspiciousFiles.txt

    echo -n "${dashed_line}" >> suspiciousFiles.txt ; echo -e "\n\nFILES THAT WERE MODIFIED WITHIN LAST 24 HOURS:\n" >> suspiciousFiles.txt
    cd ~/domains/"${domain_name}"/public_html/ && find . -mtime -1 -type f \( -iname "*.*" ! -iname "*.jpg" ! -iname "*.jpeg" ! -iname "*.png" ! -iname "*.gif" ! -iname "*.svg" ! -iname "*.webp" ! -iname "*.mp4" ! -iname "*.mov" ! -iname "*.css" ! -iname "*.txt" ! -iname "*.log" \) >> suspiciousFiles.txt

    echo -n "${dashed_line}" >> suspiciousFiles.txt ; echo -e "\n\nFILES THAT WERE ADDED WITHIN LAST 24 HOURS:\n" >> suspiciousFiles.txt
    cd ~/domains/"${domain_name}"/public_html/ && find . -ctime -1 >> suspiciousFiles.txt

    echo "${dashed_line}" >> suspiciousFiles.txt
    echo -e "${CHECK} ${BGREEN}Done,${NC} you can find suspicious files list in ${BYELLOW}suspiciousFiles.txt${NC} file."
  return 1
}

function func_list_suspicious_file_subdomain {
    echo -ne "${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName

    suspicious_Encoding=("eval(gzinflate(base64_decode\|eval (gzinflate(base64_decode\|eval(gzinflate (base64_decode\|eval (gzinflate (base64_decode\|eval(base64_decode\|eval (base64_decode\|gzinflate(base64_decode\|gzinflate (base64_decode\|gzinflate")
    dashed_line=("----------------------------------------------------------------------------------------------")
    func_domain_selection;
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" || exit
    echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    # grep -RPn &quot;(base64_decode|is_admin|eval|gzuncompress|passthru|exec|shell_exec|assert|str_rot13|system|phpinfo|chmod|mkdir|fopen|fclose|readfile|stripslashes|preg_replace|move_uploaded_file) *\(&quot;
    
    echo -n "${dashed_line}" > suspiciousFiles.txt ; echo -e "\n\nSUSPICIOUS FILES IN /wp-content/uploads/ DIRECTORY\n(Excluding .jpg, .jpeg, .png, .gif, .svg, .webp, .mp4, .mov, .css, .txt, .log):\n" >> suspiciousFiles.txt
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && find wp-content/uploads/ -type f \( -iname "*.*" ! -iname "*.jpg" ! -iname "*.jpeg" ! -iname "*.png" ! -iname "*.gif" ! -iname "*.svg" ! -iname "*.webp" ! -iname "*.mp4" ! -iname "*.mov" ! -iname "*.css" ! -iname "*.txt" ! -iname "*.log" \) >> suspiciousFiles.txt
    
    echo -n "${dashed_line}" >> suspiciousFiles.txt ; echo -e "\n\nSUSPICIOUS .php FILES IN /public_html/ DIRECTORY:\n" >> suspiciousFiles.txt
    level_medium=("eval(gzinflate(base64_decode\|eval(base64_decode(\|gzinflate(base64_decode\|gzinflate")
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && find . -type f -iname "*.php" -print0 | xargs -0 grep -ilE "${level_medium}" >> suspiciousFiles.txt

    # echo -n "${dashed_line}" >> suspiciousFiles.txt ; echo -e "\n\nSUSPICIOUS FILES THAT HAS ENCODING/ENCRYPTION INSIDE:\n" >> suspiciousFiles.txt
    # cd ~/domains/"${domain_name}"/public_html/ && grep -ilE "${suspicious_Encoding}" >> suspiciousFiles.txt

    echo -n "${dashed_line}" >> suspiciousFiles.txt ; echo -e "\n\nFILES THAT WERE MODIFIED WITHIN LAST 24 HOURS:\n" >> suspiciousFiles.txt
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && find . -mtime -1 -type f \( -iname "*.*" ! -iname "*.jpg" ! -iname "*.jpeg" ! -iname "*.png" ! -iname "*.gif" ! -iname "*.svg" ! -iname "*.webp" ! -iname "*.mp4" ! -iname "*.mov" ! -iname "*.css" ! -iname "*.txt" ! -iname "*.log" \) >> suspiciousFiles.txt

    echo -n "${dashed_line}" >> suspiciousFiles.txt ; echo -e "\n\nFILES THAT WERE ADDED WITHIN LAST 24 HOURS:\n" >> suspiciousFiles.txt
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && find . -ctime -1 >> suspiciousFiles.txt

    echo "${dashed_line}" >> suspiciousFiles.txt
    echo -e "${CHECK} ${BGREEN}Done,${NC} you can find suspicious files list in ${BYELLOW}suspiciousFiles.txt${NC} file."
  return 1
}

function func_malware_fix () {
  echo -e "\nYou chose${BGREEN} Malware Fix ${NC}"
  echo -e "${BYELLOW}Make sure you're running this script in WordPress public_html folder!${NC}"
  echo -n "You are in "; pwd;
  cwd=$(pwd)
  func_backup_question;
  echo -e "${PURPLE}Select the strenght of the fix: ${NC}"
  levels=("Easy" "Medium" "Extreme" "Exit")
    select lvl in "${levels[@]}"
    do
      case $lvl in
        "Easy")
          echo -ne "\n${YELLOW}Slow and steady! Scanning..${NC}\n"; sleep 2
          # forcedly reinstall core
          wp core download --version="$(wp core version)" --force --skip-content
          # forcedly remove files that should not exist
          for i in $(wp core verify-checksums 2>&1 | grep 'should not exist:' | cut -d : -f 3-); do rm -fv "$i"; done
          # prevents add_filter and add_action in wp-config.php affecting wp-cli executions
          sed -i 's|^add_filter|if function_exists("add_filter") add_filter|g' wp-config.php
          sed -i 's|^add_action|if function_exists("add_action") add_action|g' wp-config.php
          # forcedly reinstall plugins
          for i in $(wp plugin list --skip-themes --skip-plugins --fields=name | grep -v '^name'); do echo -e "-----\n$i\n-----"; wp plugin install --skip-themes --skip-plugins --force "$i" --version="$(wp plugin list --skip-themes --skip-plugins --name="$i" --fields=version | grep -v '^version')"; done
          # forcedly reinstall themes
          for i in $(wp theme list --skip-themes --skip-plugins --fields=name | grep -v '^name'); do echo -e "-----\n$i\n-----"; wp theme install --skip-themes --skip-plugins --force "$i" --version="$(wp theme list --skip-themes --skip-plugins --name="$i" --fields=version | grep -v '^version')"; done
          # check
          wp core verify-checksums
          # find nasty include/require on wp-config.php and index.php
          echo -e "\n${EXCLAMATION}${EXCLAMATION}${BWHITE} If you see any file other than 'wp-settings.php' and 'wp-blog-header.php' in the lines below,\ncheck your wp-config.php and index.php files for malware code injection:${NC}\n"
          grep --color "include\|require" wp-config.php index.php
          break;;

        "Medium")
          cwd=$(pwd)
          echo -e "\n${YELLOW}Good choice! Scanning..${NC}\n"
          # forcedly reinstall core
          wp core download --version="$(wp core version)" --force --skip-content
          # forcedly remove files that should not exist
          for i in $(wp core verify-checksums 2>&1 | grep 'should not exist:' | cut -d : -f 3-); do rm -fv "$i"; done

          # gathers wp-config.php DB credentials
          WPDBNAME=$(cat wp-config.php | grep DB_NAME | cut -d \' -f 4)
          WPDBUSER=$(cat wp-config.php | grep DB_USER | cut -d \' -f 4)
          WPDBPASS=$(cat wp-config.php | grep DB_PASSWORD | cut -d \' -f 4)
          WPDBHOST=$(cat wp-config.php | grep DB_HOST | cut -d \' -f 4)
          WPDBCHARSET=$(cat wp-config.php | grep DB_CHARSET | cut -d \' -f 4)
          WPTABLEPREFIX=$(cat wp-config.php | grep "\$table_prefix" | cut -d \' -f 2)

          # generates a default wp-config.php
          mv wp-config.php wp-config.php-OLD-DISABLED && wget -c https://brmb.org/wp-fix/wp-config.txt -O wp-config.php

          # fills in the correct DB credentials on the new wp-config.php file
          sed -i "/DB_NAME/s/'[^']*'/'${WPDBNAME}'/2" wp-config.php
          sed -i "/DB_USER/s/'[^']*'/'${WPDBUSER}'/2" wp-config.php
          sed -i "/DB_PASSWORD/s/'[^']*'/'${WPDBPASS}'/2" wp-config.php
          sed -i "/DB_HOST/s/'[^']*'/'${WPDBHOST}'/2" wp-config.php
          sed -i "/DB_CHARSET/s/'[^']*'/'${WPDBCHARSET}'/2" wp-config.php
          sed -i "/\$table_prefix/s/'[^']*'/'${WPTABLEPREFIX}'/1" wp-config.php
          
          wp config shuffle-salts

          # prevents add_filter and add_action in wp-config.php affecting wp-cli executions
          sed -i 's|^add_filter|if function_exists("add_filter") add_filter|g' wp-config.php;
          sed -i 's|^add_action|if function_exists("add_action") add_action|g' wp-config.php;
          # forcedly reinstall plugins
          for i in $(wp plugin list --skip-themes --skip-plugins --fields=name | grep -v '^name'); do echo -e "-----\n$i\n-----"; wp plugin install --skip-themes --skip-plugins --force "$i" --version="$(wp plugin list --skip-themes --skip-plugins --name="$i" --fields=version | grep -v '^version')"; done
          # forcedly reinstall themes
          for i in $(wp theme list --skip-themes --skip-plugins --fields=name | grep -v '^name'); do echo -e "-----\n$i\n-----"; wp theme install --skip-themes --skip-plugins --force "$i" --version="$(wp theme list --skip-themes --skip-plugins --name="$i" --fields=version | grep -v '^version')"; done
          
          echo -e "\n${YELLOW}Replacing current .htaccess with the default WordPress .htaccess..${NC}"
          mv .htaccess .htaccess-OLD-DISABLED && wget -c https://brmb.org/wp-fix/wp-config.txt -O .htaccess
          echo -e "\n${YELLOW}Disabling .htaccess files in main folders..${NC}"
          mv /wp-admin/.htaccess /wp-admin/.htaccess-OLD-DISABLED && mv /wp-content/.htaccess /wp-content/.htaccess-OLD-DISABLED && mv /wp-includes/.htaccess /wp-includes/.htaccess-OLD-DISABLED
          echo -e "\n${YELLOW}Deleting .php files in /uploads/ folder..${NC}"
          find wp-content/uploads/ -type f -name "*.php" -delete

          echo -e "\n${YELLOW}Fixing permissions for files and folders..${NC}"
          # file and folder permissions reset to Hostinger defaults
          find "${cwd}" -type d -exec chmod 755 {} \;
          find "${cwd}" -type f -exec chmod 644 {} \;
          chmod 644 "${cwd}"/wp-config.php
          chmod 644 "${cwd}"/.htaccess

          wp rewrite structure '/%postname%' && wp rewrite flush && wp cache flush && wp litespeed-purge all

          # check
          wp core verify-checksums
          # find nasty include/require on wp-config.php and index.php
          echo -e "\n${EXCLAMATION}${EXCLAMATION}${BWHITE} If you see any file other than 'wp-settings.php' and 'wp-blog-header.php' in the lines below,\ncheck your wp-config.php and index.php files for malware code injection:${NC}\n"
          grep --color "include\|require" wp-config.php index.php
          break;;

        "Extreme")
          cwd=$(pwd)
          echo -e "\n${YELLOW}I hope you have a backup! Scanning..${NC}\n"
          sleep 2
          # forcedly reinstall core
          wp core download --version="$(wp core version)" --force --skip-content
          # forcedly remove files that should not exist
          for i in $(wp core verify-checksums 2>&1 | grep 'should not exist:' | cut -d : -f 3-); do rm -fv "$i"; done

          find . -type f -name "system_log.php" >> malwareFiles.txt && find . -type f -name "wp-.myluv.php" >> malwareFiles.txt && find . -type f -name "wp-1ogin_bak.php" >> malwareFiles.txt && find . -type f -name "config.bak.php" >> malwareFiles.txt && find . -type f -name "log.txt" >> malwareFiles.txt && while read -r file; do rm -- "$file"; done < malwareFiles.txt
          
          # gathers wp-config.php DB credentials
          WPDBNAME=$(cat wp-config.php | grep DB_NAME | cut -d \' -f 4)
          WPDBUSER=$(cat wp-config.php | grep DB_USER | cut -d \' -f 4)
          WPDBPASS=$(cat wp-config.php | grep DB_PASSWORD | cut -d \' -f 4)
          WPDBHOST=$(cat wp-config.php | grep DB_HOST | cut -d \' -f 4)
          WPDBCHARSET=$(cat wp-config.php | grep DB_CHARSET | cut -d \' -f 4)
          WPTABLEPREFIX=$(cat wp-config.php | grep "\$table_prefix" | cut -d \' -f 2)

          # generates a default wp-config.php
          mv wp-config.php wp-config.php-OLD-DISABLED && wget -c https://brmb.org/wp-fix/wp-config.txt -O wp-config.php

          # fills in the correct DB credentials on the new wp-config.php file
          sed -i "/DB_NAME/s/'[^']*'/'${WPDBNAME}'/2" wp-config.php
          sed -i "/DB_USER/s/'[^']*'/'${WPDBUSER}'/2" wp-config.php
          sed -i "/DB_PASSWORD/s/'[^']*'/'${WPDBPASS}'/2" wp-config.php
          sed -i "/DB_HOST/s/'[^']*'/'${WPDBHOST}'/2" wp-config.php
          sed -i "/DB_CHARSET/s/'[^']*'/'${WPDBCHARSET}'/2" wp-config.php
          sed -i "/\$table_prefix/s/'[^']*'/'${WPTABLEPREFIX}'/1" wp-config.php
          
          wp config shuffle-salts
          # # Manual SALT Generator and replacement
          # echo -e "\n${YELLOW}Generating and adding new SALTS for wp-config.php..${NC}"
          # SALTS=$(curl -s https://api.wordpress.org/secret-key/1.1/salt/)
          # while read -r SALT; do
          # SEARCH="define( '$(echo "$SALT" | cut -d "'" -f 2)" # if this won't work, remove space after define(
          # REPLACE=$(echo "$SALT" | cut -d "'" -f 4)
          # # echo "... $SEARCH ... $SEARCH ..."
          # sed -i "/^$SEARCH/s/put your unique phrase here/$(echo $REPLACE | sed -e 's/\\/\\\\/g' -e 's/\//\\\//g' -e 's/&/\\\&/g')/" wp-config.php
          # done <<< "$SALTS"
          # echo -e "${BGREEN}Done.${NC}\n"

          # prevents add_filter and add_action in wp-config.php affecting wp-cli executions
          sed -i 's|^add_filter|if function_exists("add_filter") add_filter|g' wp-config.php;
          sed -i 's|^add_action|if function_exists("add_action") add_action|g' wp-config.php;
          # forcedly reinstall plugins
          for i in $(wp plugin list --skip-themes --skip-plugins --fields=name | grep -v '^name'); do echo -e "-----\n$i\n-----"; wp plugin install --skip-themes --skip-plugins --force "$i" --version="$(wp plugin list --skip-themes --skip-plugins --name="$i" --fields=version | grep -v '^version')"; done
          # forcedly reinstall themes
          for i in $(wp theme list --skip-themes --skip-plugins --fields=name | grep -v '^name'); do echo -e "-----\n$i\n-----"; wp theme install --skip-themes --skip-plugins --force "$i" --version="$(wp theme list --skip-themes --skip-plugins --name="$i" --fields=version | grep -v '^version')"; done
          
          echo -e "\n${YELLOW}Replacing current .htaccess with the default WordPress .htaccess..${NC}"
          mv .htaccess .htaccess-OLD-DISABLED && wget -c https://brmb.org/wp-fix/htaccess.txt -O .htaccess
          echo -e "\n${YELLOW}Disabling .htaccess files in main folders..${NC}"
          mv /wp-admin/.htaccess /wp-admin/.htaccess-OLD-DISABLED && mv /wp-content/.htaccess /wp-content/.htaccess-OLD-DISABLED && mv /wp-includes/.htaccess /wp-includes/.htaccess-OLD-DISABLED
          echo -e "\n${YELLOW}Deleting .php files in /uploads/ folder..${NC}"
          find wp-content/uploads/ -type f -name "*.php" -delete
          cd wp-content/uploads/ && wget -c https://brmb.org/wp-fix/htaccess-php.txt -O .htaccess ; cd "${cwd}" || exit
          cd wp-includes/ && wget -c https://brmb.org/wp-fix/htaccess-php.txt -O .htaccess ; cd "${cwd}" || exit

          echo -e "\n${YELLOW}Fixing permissions for files and folders..${NC}"
          # file and folder permissions reset to Hostinger defaults
          find "${cwd}" -type d -exec chmod 755 {} \;
          find "${cwd}" -type f -exec chmod 644 {} \;
          chmod 644 "${cwd}"/wp-config.php
          chmod 644 "${cwd}"/.htaccess

          wp rewrite structure '/%postname%' && wp rewrite flush && wp cache flush && wp litespeed-purge all

          # check
          wp core verify-checksums
          # find nasty include/require on wp-config.php and index.php
          echo -e "\n${EXCLAMATION}${EXCLAMATION}${BWHITE} If you see any file other than 'wp-settings.php' and 'wp-blog-header.php' in the lines below,\ncheck your wp-config.php and index.php files for malware code injection:${NC}\n"
          grep --color "include\|require" wp-config.php index.php

          ### --------------------------------------------------------------------------------------------------------------------------------------------
          
          # level_easy=("eval(gzinflate(base64_decode\|eval (gzinflate(base64_decode\|eval(gzinflate (base64_decode\|eval (gzinflate (base64_decode\|eval(base64_decode\|eval (base64_decode\|gzinflate(base64_decode\|gzinflate (base64_decode\|gzinflate")
          # level_medium=("eval(gzinflate(base64_decode\|eval(base64_decode(\|gzinflate(base64_decode\|gzinflate")
          # level_extreme=("eval(gzinflate(base64_decode\|eval(base64_decode(\|gzinflate(base64_decode\|gzinflate")
          # echo -e "\n${YELLOW}Scanning..${NC}"
          # find . -type f -name "*.php" -print0 | xargs -0 grep -ilE "${level_extreme}" >> infectedFiles_levelExtreme.txt
          # echo "Search done. Trying to fix infected files."
          # grep -R -l --exclude=fix.sh "${level_extreme}" '.' | while IFS= read -r file; do
          #   sed -i "/${level_extreme}/d" "$file"
          # done
          break;;

        "Exit")
          echo -e "${CROSS} ${RED}Exitting..${NC}"
          break;;
        *) echo -e "${CROSS} ${RED}There is no such selection as $REPLY ${NC}";;
      esac
    done
  return 1
}

function func_vulnerabilities_checker {
  func_domain_selection;
  echo -e "${BYELLOW}Working on ${domain_name}${NC}";

  wp core version | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/core -d @-
  printf "\n"
  wp plugin list --format=json | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/plugins -d @-
  printf "\n"
  wp theme list --format=json | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/themes -d @-
  printf "\n"

  history -c;  
  return 1
}

function func_vulnerabilities_checker_subdomain {
  echo -ne "\n${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
  func_domain_selection;
  echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";

  cd ~/domains/"${domain_name}"/public_html/"${subdomainName}"
  wp core version | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/core -d @-
  printf "\n"
  wp plugin list --format=json | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/plugins -d @-
  printf "\n"
  wp theme list --format=json | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/themes -d @-
  printf "\n"

  history -c;
  return 1
}

function func_vulnerabilities_checker_all {
  echo -e "${BYELLOW}Working on all domains..${NC}";

  # WordPress core, plugins, themes
  for x in domains/*/; do
    cd ~/${x}public_html
    printf "=%.0s" {1..85}
    printf "\nWorking on "${x}"\n"
    date
    wp core version | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/core -d @-
    wp plugin list --format=json | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/plugins -d @-
    wp theme list --format=json | curl -X POST -H "Content-Type: application/json" -H "Response-Type: table" http://iskander-api.heiko.xyz/themes -d @-
    printf "\n"
    printf "=%.0s" {1..85}
    printf "\n"
    cd ~
  done

  history -c;  
  return 1
}

function func_install_ssl {
  func_domain_selection;
  echo -e "${BYELLOW}Working on ${domain_name}${NC}";
  digResults=$(dig +short www."${domain_name}" | sed -n -e '2{p;q}')
  if [[ $digResults =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then
    echo -e "${BGREEN}Domain has WWW record!${NC} ${BYELLOW}Installing..${NC}"
    cd ~/domains/"${domain_name}"/public_html && wget https://fix.lukasba.com/autoencrypt-cli -O ssl.php && php -f ssl.php "${domain_name}"; rm -r itronic/ ssl.php
    echo -e "\n${CHECK} ${BGREEN}If you received SSL keys above, put them in \e]8;;https://hpanel.hostinger.com/hosting/${domain_name}/advanced/ssl\ahPanel -> SSL\e]8;;\a -> Import SSL section.${NC}"
    echo -e "${EXCLAMATION} ${BWHITE}If you didn't get SSL keys, try with a \e]8;;https://hpanel.hostinger.com/hosting/${domain_name}/advanced/php-configuration\adifferent PHP version\e]8;;\a.${NC}"
  else
    echo -e "\n${BRED}FAILED:${NC}\n${BWHITE}Domain does not have WWW., make an A record with WWW and point it to server IP first!"
  fi
  return 1
}

function func_install_ssl_subdomain {
  echo -ne "\n${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
  func_domain_selection;
  echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
  digResults=$(dig +short www."${subdomainName}"."${domain_name}" | sed -n -e '2{p;q}')

  if [[ $digResults =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then
    echo -e "${BGREEN}Subomain has WWW record!${NC} ${BYELLOW}Installing..${NC}"
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && wget https://fix.lukasba.com/autoencrypt-cli -O ssl.php && php -f ssl.php "${subdomainName}"."${domain_name}"; rm -r itronic/ ssl.php
    echo -e "\n${CHECK} ${BGREEN}If you received SSL keys above, put them in \e]8;;https://hpanel.hostinger.com/hosting/${domain_name}/advanced/ssl\ahPanel -> SSL\e]8;;\a -> Import SSL section.${NC}"
    echo -e "${EXCLAMATION} ${BWHITE}If you didn't get SSL keys, try with a \e]8;;https://hpanel.hostinger.com/hosting/${domain_name}/advanced/php-configuration\adifferent PHP version\e]8;;\a.${NC}"
  else
    echo -e "\n${BRED}FAILED:${NC}\n${BWHITE}Subdomain does not have WWW., make a www.${subdomainName} CNAME record and point it to ${subdomainName}.${domain_name} first!"
  fi
  return 1
}

function func_update_plugin {
    func_domain_selection; echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    wp plugin update --all && wp cache flush
  return 1
}

function func_update_plugin_subdomain {
    echo -ne "\n${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
    func_domain_selection; echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && wp plugin update --all && wp cache flush
  return 1
}

function func_update_theme {
    func_domain_selection; echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    wp theme update --all && wp cache flush
  return 1
}

function func_update_theme_subdomain {
    echo -ne "\n${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
    func_domain_selection; echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && wp theme update --all && wp cache flush
  return 1
}

function func_update_core {
    cwd=$(pwd)
    func_backup_question;
    func_domain_selection; echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    wp core update && wp cache flush
  return 1
}

function func_update_core_subdomain {
    cwd=$(pwd)
    func_backup_question;
    echo -ne "${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
    func_domain_selection; echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && wp core update && wp cache flush
  return 1
}

function func_reinstall_core {
    cwd=$(pwd)
    func_backup_question;
    func_domain_selection; echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    # backup=WP_${DATE} && mkdir $backup && mv wp-admin $backup && mv wp-includes $backup && mv *.php $backup && wget https://wordpress.org/latest.zip && unzip latest.zip && rm latest.zip && rm -rf wordpress/wp-content && mv wordpress/* . && cp -rv $backup/wp-config.php .
    backup=WP_${DATE} && mkdir "$backup" && cp -r wp-admin "$backup" && cp -r wp-includes "$backup" && cp *.php "$backup" && wp core download --version="$(wp core version)" --force --skip-content && cp -rv "$backup"/wp-config.php .
    echo -e "${CHECK} ${BGREEN}Done.${NC}"
  return 1
}

function func_reinstall_core_subdomain {
    cwd=$(pwd)
    func_backup_question;
    echo -ne "${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
    func_domain_selection; echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    # cd ~/domains/${domain_name}/public_html/${subdomainName} && backup=WP_${DATE} && mkdir $backup && mv wp-admin $backup && mv wp-includes $backup && mv -- *.php $backup && wget https://wordpress.org/latest.zip && unzip latest.zip && rm latest.zip && rm -rf wordpress/wp-content && mv wordpress/* . && cp -rv $backup/wp-config.php .
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && backup=WP_${DATE} && mkdir "$backup" && cp -r wp-admin "$backup" && cp -r wp-includes "$backup" && cp *.php "$backup" && wp core download --version="$(wp core version)" --force --skip-content && cp -rv "$backup"/wp-config.php .
    echo -e "${CHECK} ${BGREEN}Done.${NC}"
  return 1
}

function func_repair_db {
    func_domain_selection; echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    wp db repair && wp cache flush
  return 1
}

function func_repair_db_subdomain {
    echo -ne "\n${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
    func_domain_selection; echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && wp db repair && wp cache flush
  return 1
}

function func_elementor {
    func_domain_selection; echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    wp elementor flush_css && wp cache flush
  return 1
}

function func_elementor_subdomain {
    echo -ne "\n${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
    func_domain_selection; echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && wp elementor flush_css && wp cache flush
  return 1
}

function func_litespeed {
    func_domain_selection; echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    wp plugin install litespeed-cache --activate && wp litespeed-purge all && wp cache flush
  return 1
}

function func_litespeed_subdomain {
    echo -ne "\n${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
    func_domain_selection; echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && wp plugin install litespeed-cache --activate && wp litespeed-purge all && wp cache flush
  return 1
}

function func_php_mail {
    func_domain_selection; echo -e "${BYELLOW}Working on ${domain_name}${NC}";
    wget -c https://fix.lukasba.com/phpmail.txt -O mailtest.php && php -f mailtest.php
    rm mailtest.php
    echo -e "\e[0m"
  return 1
}

function func_php_mail_subdomain {
    echo -ne "\n${PURPLE}Enter clients subdomain name (without domain.tld, if subdomain is def.abc.com, enter just def): ${NC}"; read -r subdomainName
    func_domain_selection; echo -e "${BYELLOW}Working on ${subdomainName}.${domain_name}${NC}";
    cd ~/domains/"${domain_name}"/public_html/"${subdomainName}" && wget -c https://fix.lukasba.com/phpmail.txt -O mailtest.php && php -f mailtest.php
    rm mailtest.php
    echo -e "\e[0m"
  return 1
}

function func_scan_databases() {
  greenText() {
    echo -e "The domain (\033[32m$1\033[0m) has this DB_NAME (\033[32m$2\033[0m)"
  }

  echo "Select an option:"
  echo "1. Main domains"
  echo "2. Subdomains"
  read option

  if [ "$option" == "1" ]; then
    for domain in $(ls /home/"$USER"/domains); do
      echo "Checking domain: $domain"
      wp_config="/home/$USER/domains/$domain/public_html/wp-config.php"
      if [ -f "$wp_config" ]; then
        db_name=$(awk -F "'" '/DB_NAME/ {print $4}' "$wp_config")
        greenText "$domain" "$db_name"
      fi
    done
  elif [ "$option" == "2" ]; then
    echo "Enter main domain name:"
    read main_domain
    for subdomain in $(find /home/"$USER"/domains/"$main_domain"/public_html -maxdepth 1 -type d | tail -n +2); do
      wp_config="$subdomain/wp-config.php"
      if [ -f "$wp_config" ]; then
        db_name=$(awk -F "'" '/DB_NAME/ {print $4}' "$wp_config")
        subdomain_name=$(echo "$subdomain" | awk -F/ '{print $NF}')
        greenText "$subdomain_name.$main_domain" "$db_name"
      fi
    done
  else
    echo "Usage: check_db_names [1|2]"
  fi
  return 1
}

main

while test $? -eq 0; do
  $SELECT
done

rm -- "$0"
